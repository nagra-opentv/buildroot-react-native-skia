--- a/src/nopoll_conn.c	2016-08-21 16:00:07.000000000 +0530
+++ b/src/nopoll_conn.c	2022-01-16 23:21:27.865818026 +0530
@@ -1178,7 +1178,9 @@
 	/* init ssl ciphers and engines */
 	if (! __nopoll_tls_was_init) {
 		__nopoll_tls_was_init = nopoll_true;
-		SSL_library_init ();
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
+        SSL_library_init ();
+#endif
 	} /* end if */
 
 	/* call common implementation */
@@ -2219,7 +2221,11 @@
 	int             accept_key_size;
 	int             key_length;
 	unsigned char   buffer[EVP_MAX_MD_SIZE];
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 	EVP_MD_CTX      mdctx;
+#else
+	EVP_MD_CTX    * mdctx;
+#endif
 	const EVP_MD  * md = NULL;
 	unsigned int    md_len = EVP_MAX_MD_SIZE;
 
@@ -2238,9 +2244,18 @@
 
 	/* now sha-1 */
 	md = EVP_sha1 ();
+
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 	EVP_DigestInit (&mdctx, md);
 	EVP_DigestUpdate (&mdctx, accept_key, strlen (accept_key));
 	EVP_DigestFinal (&mdctx, buffer, &md_len);
+#else
+	mdctx = EVP_MD_CTX_create();
+	EVP_DigestInit (mdctx, md);
+	EVP_DigestUpdate (mdctx, accept_key, strlen (accept_key));
+	EVP_DigestFinal (mdctx, buffer, &md_len);
+	EVP_MD_CTX_destroy(mdctx);
+#endif
 
 	nopoll_log (ctx, NOPOLL_LEVEL_DEBUG, "Sha-1 length is: %u", md_len);
 	/* now convert into base64 */
@@ -4200,7 +4215,9 @@
 		/* init ssl ciphers and engines */
 		if (! __nopoll_tls_was_init) {
 			__nopoll_tls_was_init = nopoll_true;
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 			SSL_library_init ();
+#endif
 		} /* end if */
 
 		/* now configure chainCertificate */
